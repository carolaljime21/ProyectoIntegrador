import java.io.File
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import com.cibo.evilplot.plot._
import com.cibo.evilplot.plot.aesthetics.DefaultTheme._
import play.api.libs.json._
import com.github.tototoshi.csv._
import scala.util.{Failure, Success, Try}
import scala.util.matching.Regex
import requests.Response
import scalikejdbc._

object Crew extends App {
//LIMPIAR COLUMNA CREW
  val reader = CSVReader.open(new File("src/movie_dataset.csv"))
  val data = reader.allWithHeaders()
  reader.close()
  def replacePattern(original : String) : String = {
    var txtOr = original
    val pattern: Regex = "(\\s\"(.*?)\",)".r
    for(m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("'", "-u0027")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }
  def replacePattern2(original : String) : String = {
    var txtOr = original
    val pattern: Regex = "([a-z]\\s\"(.*?)\"\\s*[A-Z])".r
    for(m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("\"", "-u0022")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }
  def replacePattern3(original : String) : String = {
    var txtOr = original
    val pattern: Regex = "(:\\s'\"(.*?)',)".r
    for(m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("\"", "-u0022")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }
  val crew = data
    .map(row => row("crew"))
    .map(replacePattern2)
    .map(replacePattern)
    .map(replacePattern3)
    .map(text => text.replace("'", "\""))
    .map(text => text.replace("-u0027", "'"))
    .map(text => text.replace("-u0022", "\\\""))
    .map(text => Try(Json.parse(text)))
    .filter(_.isSuccess)

val idNameList = crew
    .filter(_.isSuccess)
    .map(_.get)
    .flatMap(_.as[JsArray].value)
    .map(_.as[JsObject])
    .map(jsObj => (jsObj("id").as[Int],jsObj("name").as[String]))
    .groupBy(identity)
    .map {
      case (tupla, list) => (tupla, list.size)
    }
    .filter(_._2 > 1)
    .toList
    .sortBy(_._2)
    .reverse
  println(crew.size)
  println(idNameList.take(10))
}

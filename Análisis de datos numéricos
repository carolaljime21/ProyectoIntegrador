import com.github.tototoshi.csv._
import java.io.File
import com.cibo.evilplot.plot._
import com.cibo.evilplot.plot.aesthetics.DefaultTheme._

object main extends App {
  val reader = CSVReader.open(new File("C:/Users/HP/Desktop/Proyecto/movie_dataset.csv"))
  val data = reader.allWithHeaders()
  reader.close()

  //COLUMNAS NUMÉRICAS
  val budget = data
    .flatMap(elem => elem.get("budget")).map(_.toInt)
  val popularity = data
    .flatMap(elem => elem.get("popularity")).map(_.toDouble)
  val revenue = data
    .flatMap(elem => elem.get("revenue")).map(_.toDouble)
  val runtime = data
    .flatMap(elem => elem.get("runtime")).filter(_.nonEmpty).map(_.toDouble)
  val vote_average = data
    .flatMap(elem => elem.get("vote_average")).filter(_.nonEmpty).map(_.toDouble)
  val vote_count = data
    .flatMap(elem => elem.get("vote_count")).filter(_.nonEmpty).map(_.toDouble)
  //COLUMNAS EXTRA
  val originalTittle = data
    .flatMap(elem => elem.get("original_title"))
  //PROCESOS

  //Análisis películas con mayor y menor presupuesto
  val OriginalTittleWithBudget = originalTittle.zip(budget);
  val peliculaMayPres = OriginalTittleWithBudget.maxBy(_._2)
  val peliculaMenPres = OriginalTittleWithBudget.minBy(_._2)
  val peliculaMenPresSin0 = OriginalTittleWithBudget.filter(_._2 > 0).minBy(_._2)
  println("\nPelicula con mayor presupuesto: " + peliculaMayPres)
  println("Pelicula con menor presupuesto: " + peliculaMenPres)
  println("Pelicula con menor presupuesto sin 0: " + peliculaMenPresSin0)
  //Análisis promedio de presupuestos entre las peliculas
  val sumBudget1 = budget.sum
  val promBudget1 = sumBudget1 / budget.length
  printf("\nPromedio presupuesto con ceros: %d", promBudget1)
  val Budget2 = budget.filter(_ > 0)
  val sumBudget2 = Budget2.sum
  val promBudget2 = sumBudget2 / Budget2.length
  printf("\nPromedio presupuesto sin ceros: %d \n", promBudget2)
  //GRAFICA DE PRESUPUESTOS
  val budgetValues = OriginalTittleWithBudget.take(10).map(_._2).map(_.toDouble)
  val titleData = OriginalTittleWithBudget.take(10).map(_._1)

  BarChart(budgetValues)
    .title("INFORMACION PRESUPUESTOS")
    .xAxis(titleData)
    .yAxis()
    .frame()
    .yLabel("presupuestos")
    .bottomLegend()
    .render()
    .write(new File("C:/Users/HP/Desktop/Proyecto/Graficas/presupuestos.png"))


  //Análisis películas con mayor y menor popularidad
  val OriginalTittleWithPopularity = originalTittle.zip(popularity)
  val peliculaMasPopu = OriginalTittleWithPopularity.maxBy(_._2)
  val peliculaMenPopu = OriginalTittleWithPopularity.minBy(_._2)
  val peliculaMenPopuSin0 = OriginalTittleWithPopularity.filter(_._2 > 0).minBy(_._2)
  println("\nPelicula con mayor popularidad: " + peliculaMasPopu)
  println("Pelicula con menor popularidad: " + peliculaMenPopu)
  println("Pelicula con menor popularidad (sin 0): " + peliculaMenPopuSin0)
  //Análisis promedio de popularidad entre las peliculas
  val sumPopu1 = popularity.sum
  val promPopu1 = sumPopu1 / popularity.length
  printf("\nPromedio propularidad con ceros: %f", promPopu1)
  val Popularity2 = popularity.filter(_ > 0)
  val sumPopu2 = Budget2.sum
  val promPopu2 = sumPopu2 / Popularity2.length
  printf("\nPromedio popularidad sin ceros: %d \n", promPopu2)
  //GRAFICA DE POPULARIDAD
  val popularityValues = OriginalTittleWithPopularity.take(10).map(_._2)

  BarChart(popularityValues)
    .title("INFORMACION POPULARIDAD")
    .xAxis(titleData)
    .yAxis()
    .frame()
    .yLabel("popularidad")
    .bottomLegend()
    .render()
    .write(new File("C:/Users/HP/Desktop/Proyecto/Graficas/presupuestos.png"))

  //Análisis películas con mayor y menor ingresos
  val OriginalTittleWithRevenue = originalTittle.zip(revenue);
  val peliculaMayIngresos = OriginalTittleWithRevenue.maxBy(_._2)
  val peliculaMenIngresos = OriginalTittleWithRevenue.minBy(_._2)
  val peliculaMenIngresosSin0 = OriginalTittleWithRevenue.filter(_._2 > 0).minBy(_._2)
  println("\nPelicula con mayores ingresos: " + peliculaMayIngresos)
  println("Pelicula con menores ingresos: " + peliculaMenIngresos)
  println("Pelicula con menores ingresos (sin 0): " + peliculaMenIngresosSin0)
  //Análisis promedio de ingresos entre las peliculas
  val sumIng1 = revenue.sum
  val promIng1 = sumIng1 / revenue.length
  printf("\nPromedio ingresos con ceros: %f", promIng1)
  val revenue2 = revenue.filter(_ > 0)
  val sumIng2 = revenue2.sum
  val promIng2 = sumIng2 / revenue2.length
  printf("\nPromedio ingresos sin ceros: %f \n", promIng2)
  val revenueValues = OriginalTittleWithRevenue.take(10).map(_._2)

  BarChart(revenueValues)
    .title("INFORMACION INGRESOS")
    .xAxis(titleData)
    .yAxis()
    .frame()
    .yLabel("ingresos")
    .bottomLegend()
    .render()
    .write(new File("C:/Users/HP/Desktop/Proyecto/Graficas/presupuestos.png"))

  //Análisis películas con mayor y menor duracion
  val movieRuntime = originalTittle.zip(runtime);
  val peliMayTiempo = movieRuntime.maxBy(_._2)
  val peliMenTiempo = movieRuntime.minBy(_._2)
  val peliMenTiempoSin0 = movieRuntime.filter(_._2 > 0).minBy(_._2)
  println("\nPelicula con mayor duración: " + peliMayTiempo)
  println("Pelicula con menor duración: " + peliMenTiempo)
  println("Pelicula con menor duración sin 0: " + peliMenTiempoSin0)
  //Análisis promedio de duracion entre las peliculas
  val sumDur1 = runtime.sum
  val promDur1 = sumDur1 / runtime.length
  printf("\nPromedio duración con ceros: %f", promDur1)
  val runtime2 = runtime.filter(_ > 0)
  val sumDur2 = runtime2.sum
  val promDur2 = sumDur2 / runtime2.length
  printf("\nPromedio duración sin ceros: %f \n", promDur2)
  val runtimeValues = movieRuntime.take(10).map(_._2)

  BarChart(runtimeValues)
    .title("INFORMACION TIEMPO DE DURACIÓN")
    .xAxis(titleData)
    .yAxis()
    .frame()
    .yLabel("duración")
    .bottomLegend()
    .render()
    .write(new File("C:/Users/HP/Desktop/Proyecto/Graficas/presupuestos.png"))

  //Análisis películas con mayor y menor promedio de votos
  val movieVoteAverage = originalTittle.zip(vote_average);
  val peliMayVAv = movieVoteAverage.maxBy(_._2)
  val peliMenVAv = movieVoteAverage.minBy(_._2)
  val peliMenVAvSin0 = movieVoteAverage.filter(_._2 > 0).minBy(_._2)
  println("\nPelicula con mayor promedio de votos: " + peliMayVAv)
  println("Pelicula con menor promedio de votos: " + peliMenVAv)
  println("Pelicula con menor promedio de votos sin 0: " + peliMenVAvSin0)
  //Análisis promedio de votos en promedio entre las peliculas
  val sumPromVot1 = vote_average.sum
  val promPromVot1 = sumPromVot1 / vote_average.length
  printf("\nPromedio de votos en promedio con ceros: %f", promPromVot1)
  val vote_average2 = vote_average.filter(_ > 0)
  val sumPromVot2 = vote_average2.sum
  val promPromVot2 = sumPromVot2 / vote_average2.length
  printf("\nPromedio de votos en promedio sin ceros: %f \n", promPromVot2)
  val votosPromValues = movieVoteAverage.take(10).map(_._2)

  BarChart(votosPromValues)
    .title("INFORMACION VOTOS EN PROMEDIO")
    .xAxis(titleData)
    .yAxis()
    .frame()
    .yLabel("votos en promedio")
    .bottomLegend()
    .render()
    .write(new File("C:/Users/HP/Desktop/Proyecto/Graficas/presupuestos.png"))

  //Análisis películas con mayor y menor conteo de votos
  val movieVoteCount = originalTittle.zip(vote_count);
  val peliMayVCo = movieVoteCount.maxBy(_._2)
  val peliMenVCo = movieVoteCount.minBy(_._2)
  val peliMenVCoSin0 = movieVoteCount.filter(_._2 > 0).minBy(_._2)
  println("\nPelicula con mayor conteo de votos: " + peliMayVCo)
  println("Pelicula con menor conteo de votos: " + peliMenVCo)
  println("Pelicula con menor conteo de votos sin 0: " + peliMenVCoSin0)
  //Análisis promedio de ingresos entre las peliculas
  val sumContVot1 = vote_count.sum
  val promContVot1 = sumContVot1 / vote_count.length
  printf("\nPromedio de conteo de votos con ceros: %f", promContVot1)
  val vote_count2 = vote_count.filter(_ > 0)
  val sumContVot2 = vote_count2.sum
  val promContVot2 = sumContVot2 / vote_count2.length
  printf("\nPromedio de conteo de votos sin ceros: %f", promContVot2)
  val votosValues = movieVoteCount.take(10).map(_._2)

  BarChart(votosPromValues)
    .title("INFORMACION DE CONTEO DE VOTOS")
    .xAxis(titleData)
    .yAxis()
    .frame()
    .yLabel("conteo de votos")
    .bottomLegend()
    .render()
    .write(new File("C:/Users/HP/Desktop/Proyecto/Graficas/presupuestos.png"))
}

// libraryDependencies += "com.github.tototoshi" %% "scala-csv" % "1.3.10"

import java.io.File
import com.github.tototoshi.csv._
import GenerarSQL.escapeMysql
import java.nio.charset.StandardCharsets
import java.nio.file.{Files, Paths, StandardOpenOption}

object movie extends App{
  val reader = CSVReader.open(new File("src/movie_dataset.csv"))
  val data = reader.allWithHeaders()
  reader.close()

  case class Movie(id: String,
                   title: String,
                   originalTitle: String,
                   originalLanguage: String,
                   tagline: String,
                   overview: String,
                   release_date: String,
                   genres: String,
                   status: String,
                   popularity: Double,
                   budget: Long,
                   revenue: Long,
                   runtime: Double,
                   vote_average: Double,
                   vote_count: Int,
                  )

  val SQL_INSERT_PATTERN =
    """INSERT INTO MOVIE (`ID`,`TITLE` ,`ORIGINAL_TITLE`,`ORIGINAL_LANGUAGE`
      |, `TAGLINE`, `OVERVIEW`, `RELEASE_DATE`, `GENRES`, `STATUS`,
      | `POPULARITY`, `BUDGET`, `REVENUE`,`RUNTIME`,`VOTE_AVERAGE`, `VOTE_COUNT` )
      |VALUES
      |('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %f, %d, %d, %f, %f, %d);
      |"""
      .stripMargin

  val movieData = data.map(row => Movie(
    row("id"),
    row("title"),
    row("original_title"),
    row("original_language"),
    row("tagline"),
    row("overview"),
    row("release_date"),
    row("genres"),
    row("status"),
    row("popularity").toDouble,
    row("budget").toLong,
    row("revenue").toLong,
    row("runtime")match {
      case value if value.trim.isEmpty => 0.0
      case value => value.toDouble
    },
    row("vote_average").toDouble,
    row("vote_count") match {
      case value if value.trim.isEmpty => 0
      case value => value.toInt
    }
  ))


  val scriptData = movieData
    .map(movie => SQL_INSERT_PATTERN.formatLocal(java.util.Locale.US,
      movie.id,
      escapeMysql(movie.title),
      escapeMysql(movie.originalTitle),
      escapeMysql(movie.originalLanguage),
      escapeMysql(movie.tagline),
      escapeMysql(movie.overview),
      movie.release_date,
      escapeMysql(movie.genres),
      movie.status,
      movie.popularity,
      movie.budget,
      movie.revenue,
      movie.runtime,
      movie.vote_average,
      movie.vote_count,
    ))

  val scriptFile = new File("C:/Users/Kevin/Desktop/Graficos/movie.sql")
  if (scriptFile.exists()) scriptFile.delete()
  scriptData.foreach(insert =>
    Files.write(Paths.get("C:/Users/Kevin/Desktop/Graficos/movie.sql")
      ,insert.getBytes(StandardCharsets.UTF_8)
      ,StandardOpenOption.CREATE, StandardOpenOption.APPEND)
  )
  println(movieData.map(_.title).take(1))

}

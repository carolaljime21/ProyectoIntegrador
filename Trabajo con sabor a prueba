import play.api.libs.json._
import scala.util.{Failure, Success, Try}
import com.github.tototoshi.csv._
import java.io.File
import com.cibo.evilplot.plot._
import com.cibo.evilplot.plot.aesthetics.DefaultTheme._
import requests.Response
import scalikejdbc._

object main extends App {
  val reader = CSVReader.open(new File("src/data_parcial_2_OO.csv"))
  val data = reader.allWithHeaders()
  reader.close()
  println("Total de partidos jugados en 2022: " + data.size)
  val torneosJugados = data.map(row => row("tourney_name")).groupBy(_.split(":")(0))
    .map{case (nombre, lista) => (nombre, lista.size)}.toList.sortBy(_._2)
  val torneosJugados2 = data.map(row => row("tourney_name")).groupBy(identity)
    .map { case (nombre, lista) => (nombre, lista.size) }.toList.sortBy(_._2)
  val players_info = data.map(row => row("players_info")).map(text => Try(Json.parse(text))).filter(_.isSuccess)
  val hand = players_info.map(_.get).flatMap(js => js \\ "hand").map(js => js.as[String]).groupBy(identity)
    .map{case (keyword, lista) => (keyword, lista.size) }.toList.sortBy(_._2).reverse
  println("Numero de los torneos jugados (1 instancia de Davis Cup): " + torneosJugados.size)
  println("Nombre de los torneos jugados: " + torneosJugados)
  println("Numero de los torneos jugados (Todos): " + torneosJugados2.size)
  println("Nombre de los torneos jugados: " + torneosJugados2)

  val handValues = hand.map(_._2).map(_.toDouble)
  val handData = hand.map(_._1)

  BarChart(handValues)
    .title("INFORMACION JUGADORES")
    .xAxis(handData)
    .yAxis()
    .frame()
    .yLabel("Hand")
    .bottomLegend()
    .render()
    .write(new File("C://Users//Kevin//Desktop/Hand.png"))

    val porcentajes = players_info.map(_.get).flatMap(js => js \\ "hand").map(js => js.as[String]).groupBy(identity)
      .map { case (keyword, lista) => (keyword, lista.size * 100 / hand.map(_._2).sum.toDouble)}
    println("----------------------------------------------------")
    println("Hand : " + hand)
    println("Maximo: " + hand.maxBy(_._2))
    println("Minimo: " + hand.minBy(_._2))
    println("Minimo sin null: " + hand.filterNot(_._1.contains("null")).minBy(_._2))
    println("Porcentaje: " + porcentajes)

  val height = players_info.map(_.get).flatMap(js => js \\ "height").groupBy(identity)
    .map { case (keyword, lista) => (keyword, lista.size) }.toList.sortBy(_._2).reverse
  val heigthValues = height.map(_._2).map(_.toDouble)
  val heigthData = height.map(_._1).map(_.toString())
  BarChart(heigthValues)
    .title("INFORMACION JUGADORES")
    .xAxis(heigthData)
    .yAxis()
    .frame()
    .yLabel("Heigth")
    .bottomLegend()
    .render()
    .write(new File("C://Users//Kevin//Desktop/Heigth.png"))

  val hList = players_info.map(_.get).flatMap(js => js \\ "height")
  val heightVal = hList.map(_.toString()).filterNot(_.contains("null")).map(_.toDouble)
  println("----------------------------------------------------")
  println("Heigth: " + height)
  println("Maximo: " + heightVal.max)
  println("Minimo: " + heightVal.min)
  println("Promedio con nulos: " + heightVal.sum/hList.size)
  println("Promedio sin nulos: " + heightVal.sum/hList.filterNot(_.toString().contains("null")).size)

  val match_info = data.map(row => row("match_info")).map(text => Try(Json.parse(text))).filter(_.isSuccess)
  val bestOf = match_info.map(_.get).flatMap(js => js \\ "best_of").groupBy(identity)
    .map { case (keyword, lista) => (keyword, lista.size) }.toList.sortBy(_._2).reverse
  val bestOfValues = bestOf.map(_._2).map(_.toDouble)
  val bestOfData = bestOf.map(_._1).map(_.toString())

  BarChart(bestOfValues)
    .title("INFORMACION PARTIDOS")
    .xAxis(bestOfData)
    .yAxis()
    .frame()
    .yLabel("Mejos De:")
    .bottomLegend()
    .render()
    .write(new File("C://Users//Kevin//Desktop/BestOf.png"))
  val porcentajesBO = match_info.map(_.get).flatMap(js => js \\ "best_of").groupBy(identity)
    .map { case (keyword, lista) => (keyword.toString(), lista.size * 100 / bestOf.map(_._2).sum.toDouble) }

  println("----------------------------------------------------")
  println("Best OF: " + bestOf)
  println("Maximo: " + bestOf.maxBy(_._2))
  println("Minimo: " + bestOf.minBy(_._2))
  println("Porcentajes: " + porcentajesBO)
  val minutes = match_info.map(_.get).flatMap(js => js \\ "minutes").groupBy(identity)
    .map { case (keyword, lista) => (keyword, lista.size) }.toList.sortBy(_._2).reverse
  val minutesValues = minutes.map(_._2).map(_.toDouble)
  val minutesOfData = minutes.map(_._1).map(_.toString())

  BarChart(minutesValues)
    .title("INFORMACION PARTIDOS")
    .xAxis(minutesOfData)
    .yAxis()
    .frame()
    .yLabel("Mejos De:")
    .bottomLegend()
    .render()
    .write(new File("C://Users//Kevin//Desktop/Minutes.png"))
  val mList = match_info.map(_.get).flatMap(js => js \\ "minutes")
  val mVals = mList.map(_.toString()).filterNot(_.contains("null")).map(_.toDouble)

  println("----------------------------------------------------")
  println("Minutes: " + minutes)
  println("Maximo: " + mVals.max)
  println("Minimo: " + mVals.min)
  println("Minimo sin ceros: " + mVals.filter(_>0).min)
  println("Promedio con nulos: " + mVals.sum / mList.size)
  println("Promedio sin nulos: " + mVals.sum / mList.filterNot(_.toString().contains("null")).size)
  implicit val theme = DefaultTheme.copy(
    elements = DefaultElements.copy(categoricalXAxisLabelOrientation = 90))
  
  println("----------------------------------------------------")
  println("Pregunta: Cuantos partidos a jugado Rafa Nadal, en cuales son los torneos " +
    "y en que torneo se dio su partido mas largo")
  val name = players_info.map(_.get).flatMap(js => js \\ "name").map(js => js.as[String])

  val solucion2 = match_info.map(_.get).flatMap(js => js \\ "minutes").map(_.asOpt[Int]
    .getOrElse(0)).zip(name).filter(_._2.contains("Nadal")).maxBy(_._1)._1

  val solucion1 = data.map(row => (row("tourney_name"), row("players_info"))).filter(_._2.contains("Nadal"))
  println("Torneos jugados " + solucion1.map(_._1).distinct)
  println("Total de torneos jugados " + solucion1.size)
  println("Partido con mas minutos: " + solucion2)
}

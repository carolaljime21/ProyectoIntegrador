import com.github.tototoshi.csv._
import java.io.File

object ACtexto extends App {

  val reader = CSVReader.open(new File("movie_dataset.csv"))
  val data = reader.allWithHeaders()
  reader.close()

  //genres
  val genres = data.flatMap(x => x.get("genres"))
    .groupBy {
      case genre => genre
    }.map {
    case genre => (genre._1, genre._2.size)
  }

  printf("Los generos son: %s\n" +
    "El genero menos utilizado es: %s con: %s de apariciones\n" +
    "El genero mas utilizado es: %s con: %s de apariciones\n" +
    "%s\n",
    genres.map(._1).toSet, genres.minBy(.2)._1, genres.minBy(.2)._2, genres.maxBy(.2)._1, genres.maxBy(._2)._2
    ,genres.toList.sortBy(_._2))

  //original_language
  val original_language = data.flatMap(x => x.get("original_language"))
    .groupBy {
      case language => language
    }.map {
    case language => (language._1, language._2.size)
  }

  printf("\nLos codigos de idioma son: %s\n" +
    "El codigo menos utilizado es: %s con: %s de apariciones\n" +
    "El codigo mas utilizado es: %s con: %s de apariciones\n" +
    "%s\n",
    original_language.map(._1).toSet, original_language.minBy(.2)._1, original_language.minBy(._2)._2,
    original_language.maxBy(._2)._1, original_language.maxBy(.2)._2, original_language.toList.sortBy(._2))

  //original_title
  val original_title = data.flatMap(x => x.get("original_title"))
    .groupBy {
      case o_title => o_title
    }.map {
    case o_title => (o_title._1, o_title._2.size)
  }

  printf("\nLos titulos son: %s\n" +
    "El titulo menos utilizado es: %s con: %s de apariciones\n" +
    "El titulo mas utilizado es: %s con: %s de apariciones\n" ,
    original_title.map(._1).toSet, original_title.minBy(.2)._1, original_title.minBy(._2)._2,
    original_title.maxBy(._2)._1, original_title.maxBy(._2)._2)

  //release_date
  val release_date = data.flatMap(x => x.get("release_date"))
    .groupBy {
      case date => date
    }.map {
    case date => (date._1, date._2.size)
  }

  printf("\nLas fechas de salida son: %s\n" +
    "La fecha menos lanzamientos fue: %s con: %s de apariciones\n" +
    "La fecha con mas lanzamientos fue: %s con: %s de apariciones\n",
    release_date.map(._1).toSet, release_date.minBy(.2)._1, release_date.minBy(._2)._2,
    release_date.maxBy(._2)._1, release_date.maxBy(._2)._2)

  //status
  val status = data.flatMap(x => x.get("status"))
    .groupBy {
      case status => status
    }.map {
    case status => (status._1, status._2.size)
  }

  printf("\nLos estados de las películas son: %s\n" +
    "El estado menos utilizado fue: %s con: %s de apariciones\n" +
    "El estado mas utilizado fue: %s con: %s de apariciones\n" +
    "%s\n",
    status.map(._1).toSet, status.minBy(.2)._1, status.minBy(._2)._2,
    status.maxBy(._2)._1, status.maxBy(.2)._2, status.toList.sortBy(._2))

  //title
  val title = data.flatMap(x => x.get("title"))
    .groupBy {
      case title => title
    }.map {
    case title => (title._1, title._2.size)
  }

  printf("\nLos titulos de las películas son: %s\n" +
    "El titulo con menos apariciones fue: %s con: %s de apariciones\n" +
    "El titulo con mas apariciones fue: %s con: %s de apariciones\n" ,

    title.map(._1).toSet, title.minBy(.2)._1, title.minBy(._2)._2,
    title.maxBy(._2)._1, title.maxBy(._2)._2)

  //director
  val director = data.flatMap(x => x.get("director"))
    .groupBy {
      case director => director
    }.map {
    case director => (director._1, director._2.size)
  }

  printf("\nLos directores de las películas son: %s\n" +
    "El director con menos apariciones fue: %s con: %s de apariciones\n" +
    "El director con mas apariciones fue: %s con: %s de apariciones\n" ,
    director.map(._1).toSet, director.minBy(.2)._1, director.minBy(._2)._2,
    director.maxBy(._2)._1, director.maxBy(._2)._2)



}

import java.io.File
import play.api.libs.json._
import com.github.tototoshi.csv._
import scala.util.{Failure, Success, Try}
import scala.util.matching.Regex
import scalikejdbc._

object Directors extends App {
  val reader = CSVReader.open(new File("src/movie_dataset.csv"))
  val data = reader.allWithHeaders()
  reader.close()
  def replacePattern(original: String): String = {
    var txtOr = original
    val pattern: Regex = "(\\s\"(.*?)\",)".r
    for (m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("'", "-u0027")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }
  def replacePattern2(original: String): String = {
    var txtOr = original
    val pattern: Regex = "([a-z]\\s\"(.*?)\"\\s*[A-Z])".r
    for (m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("\"", "-u0022")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }
  def replacePattern3(original: String): String = {
    var txtOr = original
    val pattern: Regex = "(:\\s'\"(.*?)',)".r
    for (m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("\"", "-u0022")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }
  val list = data
    .map(row => (row("id"), row("crew")))
  val groupedCrew = list.groupBy(_._1)
  val crewWithMovieId = groupedCrew.flatMap { case (movieId, crewList) =>
    val crew = crewList.map(_._2)
      .map(replacePattern2)
      .map(replacePattern)
      .map(replacePattern3)
      .map(text => text.replace("'", "\""))
      .map(text => text.replace("-u0027", "'"))
      .map(text => text.replace("-u0022", "\\\""))
      .map(text => Try(Json.parse(text)))
      .filter(_.isSuccess)
      .map(_.get)
      .flatMap(_.as[JsArray].value)
      .map(_.as[JsObject])
      .map(jsObj => (movieId.toInt, jsObj("id").as[Int], jsObj("name").as[String], jsObj("gender").toString()
        , jsObj("department").as[String], jsObj("job").as[String], jsObj("credit_id").as[String]))
    crew
  }.toList.distinct.filter(_._6 == ("Director"))

  Class.forName("com.mysql.cj.jdbc.Driver")
  ConnectionPool.singleton("jdbc:mysql://localhost:3306/proyecto", "root", "1234")
  implicit val session = AutoSession

  crewWithMovieId.map(x =>
    sql"""
         |INSERT INTO directors(movie_id, id, name, gender, department, job, credit_id)
          VALUES (${x._1}, ${x._2}, ${x._3}, ${x._4}, ${x._5}, ${x._6}, ${x._7})
         |""".stripMargin.update.apply()
  )
  println(crewWithMovieId.take(10))
}
